# anot

**A**dd **N**ot - Complementary tool to [anew](https://github.com/tomnomnom/anew) for removing lines from files. Perfect for bug bounty scope management and data filtering.

## 🚀 Features

- **🎯 Exact string matching**: Remove specific lines from files
- **🌐 Wildcard domain support**: `*.example.com` removes subdomains but preserves base domains
- **📍 IP address filtering**: Remove specific IP addresses
- **🌍 CIDR range support**: Remove entire IP ranges with CIDR notation
- **⚡ High performance**: Optimized for large files with pre-compiled patterns
- **🔧 Flexible output**: Dry-run mode, quiet mode, and whitespace trimming

## 📖 Quick Examples

### Basic Usage
```bash
# Remove lines from scope.txt that match patterns in oos.txt
cat oos.txt | anot scope.txt
```

### Domain Wildcards
```bash
# Input file (scope.txt)
cloudways.com
test1.customer.cloudways.com
test2.customer.cloudways.com
api.cloudways.com
www.cloudways.com
css-tricks.com

# Patterns to remove (oos.txt)
*.customer.cloudways.com
css-tricks.com

# Result
cloudways.com
api.cloudways.com
www.cloudways.com
```

### IP and CIDR Range Filtering
```bash
# Remove specific IP and entire ranges
echo -e "10.0.0.1\n192.168.1.0/24\n*.internal.com" | anot targets.txt
```

## 🛠️ Installation

### Download Binary
Download the latest release for your platform from [GitHub Releases](https://github.com/hasshido/anot/releases).

### Build from Source
```bash
git clone https://github.com/hasshido/anot
cd anot
go build -o anot .
```

### Go Install
```bash
go install github.com/hasshido/anot@latest
```

## 📋 Usage

### Command Line Options
```bash
anot [options] <filename>
```

**Options:**
- `-d` : **Dry-run mode** - Show filtered output without modifying the file
- `-q` : **Quiet mode** - Update file silently (no stdout output)  
- `-t` : **Trim mode** - Trim whitespace before comparison

### Pattern Types

#### 1. **Exact Matches**
Remove lines that exactly match the input:
```bash
echo "example.com" | anot targets.txt
```

#### 2. **Wildcard Domains**
Use `*.domain.com` to remove subdomains but preserve the base domain:
```bash
# *.example.com removes:
# - sub.example.com ✅
# - deep.sub.example.com ✅  
# - example.com ❌ (preserved)
echo "*.example.com" | anot scope.txt
```

#### 3. **IP Addresses**
Remove specific IP addresses:
```bash
echo "192.168.1.100" | anot targets.txt
```

#### 4. **CIDR Ranges**
Remove entire IP ranges using CIDR notation:
```bash
# Remove all IPs in the 10.0.0.0/8 range
echo "10.0.0.0/8" | anot targets.txt

# IPv6 is also supported
echo "2001:db8::/32" | anot targets.txt
```

## 🎯 Real-World Examples

### Bug Bounty Scope Management
```bash
# Remove out-of-scope domains and IP ranges
cat out-of-scope.txt | anot in-scope.txt

# Dry-run to preview changes
cat out-of-scope.txt | anot -d in-scope.txt

# Silent update without output
cat out-of-scope.txt | anot -q in-scope.txt
```

### Network Security
```bash
# Remove internal networks from target list
echo -e "192.168.0.0/16\n10.0.0.0/8\n172.16.0.0/12" | anot external-targets.txt
```

### Data Cleaning
```bash
# Remove test domains from production list
echo "*.test.com" | anot production-domains.txt
```

## ⚡ Performance

`anot` is optimized for large files:
- **Pre-compiled CIDR matchers** for faster IP range checking
- **Single-pass IP parsing** to minimize overhead
- **Smart pattern routing** to avoid unnecessary comparisons
- **Efficient I/O buffering** for large files

Benchmarks show processing of 20,000+ lines in under 100ms.

## 🔧 Advanced Usage

### Combining Multiple Pattern Types
```bash
# Mix exact matches, wildcards, IPs, and CIDR ranges
cat << EOF | anot targets.txt
*.internal.com
192.168.1.100
10.0.0.0/24
staging.example.com
EOF
```

### Pipeline Integration
```bash
# Chain with other tools
subfinder -d example.com | anot -d scope.txt | httpx
```

## 🤝 Contributing

Contributions are welcome! Please feel free to submit issues and pull requests.

## 📄 License

This project is licensed under the MIT License.

## 🙏 Acknowledgments

Inspired by [anew](https://github.com/tomnomnom/anew) by [@tomnomnom](https://github.com/tomnomnom).

